"""Module of globals for using regular expressions for BSO data analysis.

"""

__all__ = ['ALL_LANG_PATTERN_LIST',
           'ALL_LANGUAGES_LIST',
           'PATTERN_DICT',
           'PATTERN_KEYS_DICT',
          ]


# Python libraries generated by perplexity.ai.
# ///!\\\ does NOT contain python
PYLIB_INIT =('NumPy,SciPy,Pandas,Matplotlib,Scikit-learn,SymPy,Astropy,Biopython,'
             'Statsmodels,Seaborn,Numba,TensorFlow,PyTorch,Keras,Theano,OpenCV,'
             'Scikit-image,NetworkX,Gensim,SpaCy,Plotly,Bokeh,Mayavi,VPython,PyMC3,'
             'Edward,Zarr,Dask,HDF5,Xarray,IPython,Jupyter,BeautifulSoup,Requests,'
             'Selenium,NLTK,Lifelines,EconML,Pymatgen,ChemPy,Pandas-profiling,HoloViews,'
             'Altair,DiveIntoGraphs,Napari,pytorch-lightning,rasterio,Fiona,RDKit,'
             'mBuild,MolSSI,CoolProp,Toblerity,Folium,Sciunit,Lmfit,EoN,MDAnalysis,PorePy,'
             'Pydantic,PyVista,Dipy,Nibabel,MNE-Python,Brian2,NEST,Pylearn2,Gala,'
             'dynesty,Casadi,GPyOpt,GpyTorch,LorentzGroupNetwork,MarsyasPy,WekaPy,GWpy,'
             'LALSuite,LIGO-PEutils,pytplot,pysynphot,synphot,SpectralCube,sunpy,'
             'sunraster,eispac,pysat,pysatModels,pysatSpaceWeather,pysatCDF,gym,Basemap,'
             'Cartopy,cmocean,colorcet,Oceanspy,xgcm,xmitgcm,fatiando,harmonica,boule,'
             'pymc4,tensorly,tensorpack,nilearn,nipy,nitime,nistats,nibabel,trimesh,'
             'pvlib-python,pysolar,sunpy-timeseries,gammapy,sherpa,xspec_emcee,'
             'xspec_utils,xspec_fitutils')


# list of programming languages
LANGUAGES_INIT = ('Python|R|MATLAB|Julia|Fortran|C\+\+|SAS|SQL|Java|C|Scala|SPSS|Mathematica|Octave|'
                  'Stata|LabVIEW|APL|Maple|Wolfram Language|IDL|Haskell|Go|Ruby|Perl|JavaScript|'
                  'Swift|Lua|Rust|COBOL|Ada|Lisp|Prolog|Scheme|F\#|Erlang|Groovy|Dart|TypeScript|'
                  'Kotlin|Nim|Chapel|Racket|Tcl|Smalltalk|Eiffel|Q|Maxima|Scilab|Sage')


# list of free vs proprietaty languages
FREE_LANGUAGES_INIT = ('Python, R, Julia, Fortran, C\+\+, SQL, Java, C, Scala, Octave, APL, Haskell, '
                       'Go, Ruby, Perl, JavaScript, Swift, Lua, Rust, COBOL, Ada, Lisp, Prolog, '
                       'Scheme, F\#, Erlang, Groovy, Dart, TypeScript, Kotlin, Nim, Chapel, '
                       'Racket, Tcl, Smalltalk, Eiffel, Maxima, Scilab, Sage')

PROP_LANGUAGES_INIT = "MATLAB, SAS, SPSS, Mathematica, Stata, LabVIEW, Maple, Wolfram Language, IDL, Q"

# Building patterns for filtering data using regex
PYLIB_LIST = PYLIB_INIT.split(',')
PYLIB_PATTERN = r''
for pylib in PYLIB_LIST[:-1]:
    PYLIB_PATTERN += rf'((^|\||\s){pylib}($|\||\s))|'
PYLIB_LAST = PYLIB_LIST[-1]
PYLIB_PATTERN += rf'((^|\||\s){PYLIB_LAST}($|\||\s))'

PYTHON_PATTERN = r'(^|\||\s)(python)($|\||\s)'
MATLAB_PATTERN = r'(^|\||\s)(matlab)($|\||\s)'

FREE_LANGUAGES_LIST = FREE_LANGUAGES_INIT.split(', ')
FREE_LANG_PATTERN = r''
for free_lang in FREE_LANGUAGES_LIST[:-1]:
    FREE_LANG_PATTERN += rf'(^|\||\s)({free_lang})($|\||\s)|'
FREE_LANG_LAST = FREE_LANGUAGES_LIST[-1]
FREE_LANG_PATTERN += rf'((^|\||\s){FREE_LANG_LAST}($|\||\s))'

PROP_LANGUAGES_LIST = PROP_LANGUAGES_INIT.split(', ')
PROP_LANG_PATTERN = rf''
for prop_lang in PROP_LANGUAGES_LIST[:-1]:
    PROP_LANG_PATTERN += rf'(^|\||\s)({prop_lang})($|\||\s)|'
PROP_LANG_LAST = PROP_LANGUAGES_LIST[-1]
PROP_LANG_PATTERN += rf'((^|\||\s){PROP_LANG_LAST}($|\||\s))'

ALL_LANGUAGES_LIST = LANGUAGES_INIT.split('|')
ALL_LANG_PATTERN = rf''
for all_lang in ALL_LANGUAGES_LIST[:-1]:
    ALL_LANG_PATTERN += rf'(^|\||\s)({all_lang})($|\||\s)|'
ALL_LANG_LAST = ALL_LANGUAGES_LIST[-1]
ALL_LANG_PATTERN += rf'((^|\||\s){ALL_LANG_LAST}($|\||\s))'

ALL_LANG_PATTERN_LIST = []
for all_lang in ALL_LANGUAGES_LIST:
    ALL_LANG_PATTERN_LIST.append(rf'((^|\||\s){all_lang}($|\||\s))')

PATTERN_DICT = {'pylib'    : PYLIB_PATTERN,
                'python'   : PYTHON_PATTERN,
                'matlab'   : MATLAB_PATTERN,
                'free_lang': FREE_LANG_PATTERN,
                'prop_lang': PROP_LANG_PATTERN,
                'all_lang' : ALL_LANG_PATTERN,
               }

PATTERN_KEYS_DICT = {'python': ['pylib', 'python'],
                     'matlab': ['matlab'],
                     'all'   : [],
                    }